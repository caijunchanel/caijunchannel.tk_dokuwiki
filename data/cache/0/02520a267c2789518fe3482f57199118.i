a:340:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:41:"15分钟学会使用Git和远程代码库";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1;}i:4;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:354:"Git是个了不起但却复杂的源代码管理系统。它能支持复杂的任务，却因此经常被认为太过复杂而不适用于简单的日常工作。
让我们诚实一记吧：Git是复杂的，我们不要装作它不是。但我仍然会试图教会你用（我的）基本的Git和远程代码库干活的工作步骤，在15分钟内。";}i:2;i:58;}i:5;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:412;}i:6;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:414;}i:7;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"工作步骤";i:1;i:2;i:2;i:414;}i:2;i:414;}i:8;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:414;}i:9;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:414;}i:10;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:90:"我会展示以下的步骤，通常能帮我独自在一台或多台机器上做项目。";}i:2;i:440;}i:11;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:530;}i:12;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:"
创建一个远程的空代码库（在BitBucket上）";}i:2;i:532;}i:13;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:587;}i:14;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:"
在本地代码库添加一个项目";}i:2;i:589;}i:15;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:626;}i:16;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"
在分支上开发新功能";}i:2;i:628;}i:17;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:656;}i:18;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:"
a) 保留新功能 或者 b) 丢弃它们";}i:2;i:658;}i:19;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:700;}i:20;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"
也许，回到某个早先的时间点";}i:2;i:702;}i:21;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:742;}i:22;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:"
将本地代码库推送到远程代码库";}i:2;i:744;}i:23;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:787;}i:24;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:"
在另一台机器上取得远程代码库";}i:2;i:789;}i:25;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:832;}i:26;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:834;}i:27;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:838;}i:28;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:9:"安装Git";i:1;i:2;i:2;i:838;}i:2;i:838;}i:29;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:838;}i:30;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:838;}i:31;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:184:"在大多数*nix系统（Linux、OS X）上，Git已经被安装了。你通过发送下面的命令，可以通过Git自身，把它更新到最新的的开发版本（不推荐）。";}i:2;i:866;}i:32;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:1050;}i:33;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"
git clone ";}i:2;i:1052;}i:34;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:26:"https://github.com/git/git";i:1;N;}i:2;i:1063;}i:35;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:1089;}i:36;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:117:"
在Windows上，你可以在这里下载Git的安装程序。如果你真的需要其他系统的安装程序，Mac ";}i:2;i:1091;}i:37;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:2:"OS";}i:2;i:1208;}i:38;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:" X安装文件在这里，Linux的操作指导在这里。";}i:2;i:1210;}i:39;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:1268;}i:40;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1270;}i:41;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1274;}i:42;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:27:"创建一个远程代码库";i:1;i:2;i:2;i:1274;}i:2;i:1274;}i:43;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1274;}i:44;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1274;}i:45;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:201:"很多人喜欢用Github。我个人更喜欢BitBucket，因为它提供了不限制的私有代码库，那是我最需要的。你可以将下列指令转换到Github上，这些过程是相同的。";}i:2;i:1315;}i:46;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:1516;}i:47;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"
那么，去到";}i:2;i:1518;}i:48;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:24:"http://www.bitbucket.org";i:1;s:17:"www.bitbucket.org";}i:2;i:1534;}i:49;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:144:"并注册一个账号。一旦完成，登录后点击最上方的“create（创建）”按钮。照着填写表格，勾选私有代码库。";}i:2;i:1551;}i:50;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:1695;}i:51;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:90:"
你可不想让其他人来偷窥你的Facebook的杀手级应用的源代码，对吧。";}i:2;i:1697;}i:52;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:1787;}i:53;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:91:"
你现在可以离开BitBucket了，我们在已经有了所有那里需要的东西了。";}i:2;i:1789;}i:54;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:1880;}i:55;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1882;}i:56;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1886;}i:57;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:9:"设置Git";i:1;i:2;i:2;i:1886;}i:2;i:1886;}i:58;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1886;}i:59;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1886;}i:60;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:147:"在我们能用Git工作之前，我们需要做个一次性的配置。为了Git能跟踪到谁做了修改，我们需要设置你的用户名。";}i:2;i:1910;}i:61;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:2057;}i:62;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:91:"
我强烈建议你使用与注册BitBucket账号相同的用户名和电子邮箱地址。";}i:2;i:2059;}i:63;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:2150;}i:64;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:119:"
发送这些命令，相应地替换掉其中的“your_username”和“your_email@domain.com”（注意引号）：";}i:2;i:2152;}i:65;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:2271;}i:66;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"
git config ";}i:2;i:2273;}i:67;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:2285;}i:68;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"global user.name ";}i:2;i:2287;}i:69;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:2304;}i:70;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"your_username";}i:2;i:2305;}i:71;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:2318;}i:72;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:2319;}i:73;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"
git config ";}i:2;i:2321;}i:74;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:2333;}i:75;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:"global user.email your_email@domain.com";}i:2;i:2335;}i:76;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:2374;}i:77;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:167:"
我们也会设定推送（push）的默认值为‘simple’。要了解这是什么意思，快速阅读我之前发布的关于推送的默认值（非必须）。";}i:2;i:2376;}i:78;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:2543;}i:79;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"
发送这条命令：";}i:2;i:2545;}i:80;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:2567;}i:81;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"
git config ";}i:2;i:2569;}i:82;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:2581;}i:83;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"global push.default simple";}i:2;i:2583;}i:84;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:2609;}i:85;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:148:"
我们都设好了。你无需在你的机器上再重复这些配置，但如果你在另一台机器上工作的话，不要忘记这些配置。";}i:2;i:2611;}i:86;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:2759;}i:87;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:97:"
如果你忘记做初始的配置，Git不会允许你提交任何东西，这会让你困扰。";}i:2;i:2761;}i:88;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:2858;}i:89;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2860;}i:90;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2864;}i:91;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:27:"创建一个本地代码库";i:1;i:2;i:2;i:2864;}i:2;i:2864;}i:92;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:2864;}i:93;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2864;}i:94;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:157:"作为例子，我们会假装我们有一个网站（无所谓技术）存在于我们机器上的‘workspace’文件夹下的’my_site’文件夹内。";}i:2;i:2905;}i:95;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:3062;}i:96;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:76:"
在命令行中，去到你的站点的根文件夹。在OS X和Linux上：";}i:2;i:3064;}i:97;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:3140;}i:98;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"
cd ~/workspace/my_site/";}i:2;i:3142;}i:99;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:3166;}i:100;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"
在Windows上：";}i:2;i:3168;}i:101;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:3185;}i:102;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"
cd c:\workspace\my_site";}i:2;i:3187;}i:103;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:3211;}i:104;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:148:"
我们首先需要告诉Git这个文件夹是我们需要跟踪的项目。所以我们发送这个命令来初始化一个新的本地Git代码库";}i:2;i:3213;}i:105;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:3361;}i:106;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"
git init";}i:2;i:3363;}i:107;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:3372;}i:108;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:105:"
Git会在my_site文件夹内创建一个名为.git的隐藏文件夹，那就是你的本地代码库。";}i:2;i:3374;}i:109;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:3479;}i:110;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3481;}i:111;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3485;}i:112;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:23:"加载（Stage）文件";i:1;i:2;i:2;i:3485;}i:2;i:3485;}i:113;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:3485;}i:114;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3485;}i:115;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:86:"我们现在需要命令Git我们需要加载（stage）所有项目文件。发送：";}i:2;i:3522;}i:116;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:3608;}i:117;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"
git add .";}i:2;i:3610;}i:118;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:3620;}i:119;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:179:"
最后的“.”符号的意思是“所有文件、文件夹和子文件夹”。假如我们只想要把特定文件添加到源代码控制中去，我们可以指定它们：";}i:2;i:3622;}i:120;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:3801;}i:121;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"
git add my_file, my_other_file";}i:2;i:3803;}i:122;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:3834;}i:123;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3836;}i:124;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3840;}i:125;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"提交文件";i:1;i:2;i:2;i:3840;}i:2;i:3840;}i:126;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:3840;}i:127;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3840;}i:128;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:150:"现在，我们想要提交已加载（staged）的文件。阅读“添加一个时间点，在这里你的文件处在一个可还原的状态”。";}i:2;i:3867;}i:129;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:4017;}i:130;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:171:"
我们提交我们的文件时，总是附带着有意义的注释，描述了它们现在的状态。我一直用“initial commit”来作为第一个提交的注释。";}i:2;i:4019;}i:131;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:4190;}i:132;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"
git commit -m ";}i:2;i:4192;}i:133;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:4207;}i:134;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"initial commit";}i:2;i:4208;}i:135;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:4222;}i:136;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:4223;}i:137;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:210:"
就这样。现在你随时都可以回滚到这个提交状态。如果你有需要检查你现在的已加载（staged）和未加载（unstaged）文件的状态、提交等，你可以询问git的状态：";}i:2;i:4225;}i:138;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:4435;}i:139;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"
git status";}i:2;i:4437;}i:140;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:4448;}i:141;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4450;}i:142;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4454;}i:143;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"创建分支";i:1;i:2;i:2;i:4454;}i:2;i:4454;}i:144;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:4454;}i:145;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4454;}i:146;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:180:"建立分支是你创建代码的独立版本的动作，独立于你的主干分支。默认地，每次你提交到Git的文件都会被储存到“master（主干）”分支。";}i:2;i:4481;}i:147;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:4661;}i:148;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:169:"
现在我们来说说，你想要向项目里添加一个功能，但你想要能够回滚到现在版本，以防出现差错，或者你决定要放弃这个功能。";}i:2;i:4663;}i:149;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:4832;}i:150;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:94:"
这就是你创建分支的时候了。创建并同时切换到你新建的分支，发送：";}i:2;i:4834;}i:151;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:4928;}i:152;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"
git checkout -b new_feature";}i:2;i:4930;}i:153;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:4958;}i:154;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:76:"
或者，你可以先创建一个分支然后手动切换，就像这样：";}i:2;i:4960;}i:155;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:5036;}i:156;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:"
git branch new_featuregit checkout new_feature";}i:2;i:5038;}i:157;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:5085;}i:158;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:"
要看你现在项目下所有的分支，发送这个：";}i:2;i:5087;}i:159;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:5145;}i:160;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"
git branch";}i:2;i:5147;}i:161;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:5158;}i:162;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:136:"
现在你可以在你的项目上无所顾忌地做任何你想做的：任何时候，你都可以回到你创建分支前的状态。";}i:2;i:5160;}i:163;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:5296;}i:164;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:97:"
注意，你同时可以有多个分支，甚至可以从一个分支上再创建一个分支。";}i:2;i:5298;}i:165;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:5395;}i:166;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5397;}i:167;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5401;}i:168;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"合并分支";i:1;i:2;i:2;i:5401;}i:2;i:5401;}i:169;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:5401;}i:170;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5401;}i:171;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:182:"当你对你的新功能满意了的时候，你想要把它加到主干分支上。当你在你的新功能分支上时，你首先需要加载（stage）并且提交你的文件：";}i:2;i:5428;}i:172;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:5610;}i:173;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"
git add .git commit -m ";}i:2;i:5612;}i:174;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:5636;}i:175;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"adds my new feature";}i:2;i:5637;}i:176;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:5656;}i:177;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:5657;}i:178;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:"
然后你移到你的主干分支：";}i:2;i:5659;}i:179;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:5696;}i:180;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"
git checkout master";}i:2;i:5698;}i:181;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:5718;}i:182;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"
像这样合并：";}i:2;i:5720;}i:183;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:5739;}i:184;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"
git merge new_feature";}i:2;i:5741;}i:185;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:5763;}i:186;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:76:"
此时，你的主干分支和你的新功能分支会变成一样的了。";}i:2;i:5765;}i:187;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:5841;}i:188;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5843;}i:189;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5847;}i:190;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"丢弃分支";i:1;i:2;i:2;i:5847;}i:2;i:5847;}i:191;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:5847;}i:192;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5847;}i:193;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:131:"相反，如果你打算丢弃你在分支里做的修改，你首先需要加载（stage）你的文件并且在分支里提交：";}i:2;i:5874;}i:194;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:6005;}i:195;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"
git add .git commit -m ";}i:2;i:6007;}i:196;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6031;}i:197;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"feature to be discarded";}i:2;i:6032;}i:198;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6055;}i:199;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:6056;}i:200;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:"
然后，你移到主干分支：";}i:2;i:6058;}i:201;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:6092;}i:202;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"
git checkout master";}i:2;i:6094;}i:203;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:6114;}i:204;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:"
现在，你的代码处于你创建分支之前的状态了。";}i:2;i:6116;}i:205;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:6180;}i:206;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6182;}i:207;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6186;}i:208;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"删除一个分支";i:1;i:2;i:2;i:6186;}i:2;i:6186;}i:209;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:6186;}i:210;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6186;}i:211;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:90:"如果你要把你的分支合并到主干分支，从主干（master）分支上发送：";}i:2;i:6219;}i:212;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:6309;}i:213;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"
git branch -d new_feature";}i:2;i:6311;}i:214;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:6337;}i:215;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:115:"
假如修改已经合并了，它只会删除分支。假如分支没有合并，你会得到一个错误信息。";}i:2;i:6339;}i:216;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:6454;}i:217;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:194:"
删除一个未合并的分支（通常你不想保留的修改），你需要发送一样的命令附带一个大写D。意思是“强制删除分支，无论如何我不想要它了。”：";}i:2;i:6456;}i:218;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:6650;}i:219;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"
git branch -D new_feature";}i:2;i:6652;}i:220;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:6678;}i:221;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6680;}i:222;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6684;}i:223;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:30:"回滚到之前的提交状态";i:1;i:2;i:2;i:6684;}i:2;i:6684;}i:224;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:6684;}i:225;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6684;}i:226;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:159:"在某些时候，你可能想要回到之前的代码版本。首先，你需要找到你想回到哪个版本。要看所有的完成了的提交，发送：";}i:2;i:6729;}i:227;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:6888;}i:228;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"
git log";}i:2;i:6890;}i:229;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:6898;}i:230;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:"
这会输出你的提交的历史记录，像这样：";}i:2;i:6900;}i:231;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:6955;}i:232;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:160:"
commit ca82a6dff817ec66f44342007202690a93763949Author: your_username your_email@domain.comDate:   Mon Nov 4 12:52:11 2013 -0700    changes the frontpage layout";}i:2;i:6957;}i:233;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:7117;}i:234;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:151:"
commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7Author: your_username your_email@domain.comDate:   Mon Nov 4 11:40:33 2013 -0700    adds my new feature";}i:2;i:7119;}i:235;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:7270;}i:236;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:146:"
commit a11bef06a3f659402fe7563abf99ad00de2209e6Author: your_username your_email@domain.comDate:   Mon Nov 4 10:37:28 2013 -0700    initial commit";}i:2;i:7272;}i:237;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:7418;}i:238;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:150:"
如果你想回到“adds my new feature”这个提交，简单地用提交的ID做签出（checkout）（我通常只用到ID开头的9个字符）";}i:2;i:7420;}i:239;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:7570;}i:240;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"
git checkout 085bb3bcb";}i:2;i:7572;}i:241;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:7595;}i:242;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:"
你也可以签出到一个新的分支，像这样：";}i:2;i:7597;}i:243;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:7652;}i:244;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:"
git checkout -b my_previous_version 085bb3bcb";}i:2;i:7654;}i:245;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:7700;}i:246;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:88:"
只是别太疯狂了！你的分支越复杂，就越难确定你真正在做什么。";}i:2;i:7702;}i:247;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:7790;}i:248;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7792;}i:249;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7796;}i:250;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:24:"推送到远程代码库";i:1;i:2;i:2;i:7796;}i:2;i:7796;}i:251;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:7796;}i:252;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7796;}i:253;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:132:"在第一次你想推送一个本地代码库到远程代码库时，你需要把它添加到你的项目配置里。像这样做：";}i:2;i:7835;}i:254;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:7967;}i:255;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"
git remote add origin ";}i:2;i:7969;}i:256;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:79:"https://your_username@bitbucket.org/your_username/name_of_remote_repository.git";i:1;N;}i:2;i:7992;}i:257;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:8071;}i:258;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:220:"
注意这里的“origin”只是一个习惯。它是你的远程代码库的别名，但是你可以用其他任何你喜欢的词。你甚至可以有多个远程代码库，你只需要给它们起不同的别名。";}i:2;i:8073;}i:259;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:8293;}i:260;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:88:"
之后，你想要推送你的本地代码库的主干分支到你的远程代码库：";}i:2;i:8295;}i:261;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:8383;}i:262;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"
git push origin master";}i:2;i:8385;}i:263;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:8408;}i:264;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:148:"
如果你使用Bitbucket，在这时，你会被请求输入你的密码。照做，你的本地代码库会被推送到你的远程代码库上。";}i:2;i:8410;}i:265;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:8558;}i:266;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8560;}i:267;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:8564;}i:268;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:42:"取得远程代码库的一份本地拷贝";i:1;i:2;i:2;i:8564;}i:2;i:8564;}i:269;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:8564;}i:270;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8564;}i:271;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:197:"如果你还没有一份远程代码库的本地版本（例如，如果你在另一台机器上开始工作，这台机器上还没有用过这个项目），你首先需要拷贝（clone）它。";}i:2;i:8620;}i:272;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:8817;}i:273;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:67:"
去到你的代码库想要拷贝到的文件夹下，并发送：";}i:2;i:8819;}i:274;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:8886;}i:275;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"
git clone ";}i:2;i:8888;}i:276;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:79:"https://your_username@bitbucket.org/your_username/name_of_remote_repository.git";i:1;N;}i:2;i:8899;}i:277;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:8978;}i:278;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:166:"
另一方面，如果你已经在本地的项目上工作了，只是想从远程代码库上取得它最新的版本，移动到项目的根目录下，并发送：";}i:2;i:8980;}i:279;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:9146;}i:280;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"
git pull origin master";}i:2;i:9148;}i:281;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:9171;}i:282;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9173;}i:283;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9177;}i:284;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:6:"别名";i:1;i:2;i:2;i:9177;}i:2;i:9177;}i:285;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:9177;}i:286;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9177;}i:287;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:66:"Git允许你为你常用的命令创建快捷方式（别名）。";}i:2;i:9198;}i:288;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:9264;}i:289;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:192:"
例如，如果你不想每次都输入git commit -m “some comment”，而是输入git c “some comment”，你可以向你的git全局配置里添加一个别名来实现，像这样：";}i:2;i:9266;}i:290;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:9458;}i:291;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"
git config ";}i:2;i:9460;}i:292;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:9472;}i:293;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"global alias.c 'commit -m'";}i:2;i:9474;}i:294;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:9500;}i:295;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:"
这是我使用的别名列表：";}i:2;i:9502;}i:296;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:9536;}i:297;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"
git config ";}i:2;i:9538;}i:298;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:9550;}i:299;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"global alias.c 'commit -m'";}i:2;i:9552;}i:300;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:9578;}i:301;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"
git config ";}i:2;i:9580;}i:302;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:9592;}i:303;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"global alias.co 'checkout'";}i:2;i:9594;}i:304;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:9620;}i:305;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"
git config ";}i:2;i:9622;}i:306;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:9634;}i:307;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:"global alias.cob 'checkout -b'";}i:2;i:9636;}i:308;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:9666;}i:309;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"
git config ";}i:2;i:9668;}i:310;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:9680;}i:311;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"global alias.br 'branch'";}i:2;i:9682;}i:312;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:9706;}i:313;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"
git config ";}i:2;i:9708;}i:314;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:9720;}i:315;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"global alias.m 'merge'";}i:2;i:9722;}i:316;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:9744;}i:317;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"
git config ";}i:2;i:9746;}i:318;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:9758;}i:319;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"global alias.a 'add .'";}i:2;i:9760;}i:320;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:9782;}i:321;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"
git config ";}i:2;i:9784;}i:322;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:9796;}i:323;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"global alias.s 'status'";}i:2;i:9798;}i:324;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:9821;}i:325;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"
git config ";}i:2;i:9823;}i:326;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:9835;}i:327;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"global alias.dbr 'branch -d'";}i:2;i:9837;}i:328;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:9865;}i:329;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9867;}i:330;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9869;}i:331;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:9:"进一步";i:1;i:2;i:2;i:9869;}i:2;i:9869;}i:332;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:9869;}i:333;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9869;}i:334;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:120:"当然，还有比这些更多的Git内容。如果你想要更了解Git，我推荐官方文档和教程，你可以在";}i:2;i:9892;}i:335;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:32:"http://git-scm.com/documentation";i:1;N;}i:2;i:10012;}i:336;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"找到。";}i:2;i:10044;}i:337;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10053;}i:338;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:10053;}i:339;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:10053;}}